name: Run Scratch Org Flow
description: 'Execute a named CumulusCI flow'
inputs:
  cumulusci-version:
    description: 'version of CumulusCI to install'
    required: false
  sfdx-version:
    description: 'version of SFDX to install'
    required: false
  dev-hub-auth-url:
    description: 'SFDX auth URL for the Dev Hub'
    required: true
  cumulusci-service-github:
    description: 'Value for CUMULUSCI_SERVICE_github'
    required: true
  org-name:
    description: 'Name of the scratch org or persistent org config to use'
    required: true
  flow-name:
    description: 'Name of the Cumulus flow to execute'
    required: true
  flow-task-options:
    description: 'Task options passed to the flow'
    required: false
  commit-status-name:
    description: 'Name of an optional extra commit status to set from build results'
    required: false
    default: 
  commit-status-regex:
    description: 'Regex to apply to flow log to locate commit status value'
    required: false
    default:
  commit-status-description-prefix:
    description: 'Value to prefix before regex result in commit status value'
    required: false
    default:

outputs:
  error-message:
    description: "Error message returned by the flow, if any"
    value: ${{ steps.run-flow.outputs.error-message }}
   
    
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    
    - name: Set Up CumulusCI
      uses: RupertBarrow/setup-cumulus@rb/upgrade-to-setup-python-v_4_5_0
      with:
        cumulusci-version: '${{ inputs.cumulusci-version }}'
        sfdx-version: '${{ inputs.sfdx-version }}'
        
    - name: Authorize Dev Hub
      uses: cumulus-actions/authorize-org@v1
      with:
        auth-url: '${{ inputs.dev-hub-auth-url }}'
        org-name: dev-hub
        dev-hub: true
        
    - name: Run Flow
      id: run-flow
      shell: bash {0}
      env:
        CUMULUSCI_SERVICE_github: ${{ inputs.cumulusci-service-github }}
      run: |
        cci flow run ${{ inputs.flow-name }} --org ${{ inputs.org-name }} ${{ inputs.flow-task-options }} 2>/tmp/err.log
        # see https://tfrommen.de/things-i-learned-while-replacing-a-github-app-with-github-actions-workflows/
        status=$?
        if [ "$status" != "0" ]; then
          cat /tmp/err.log
          echo "error-message=$(cat /tmp/err.log)" >> $GITHUB_OUTPUT
          exit $status
        fi
        
    - name: Set Commit Status
      if: ${{ inputs.commit-status-regex && inputs.commit-status-name }}
      env:
        GITHUB_TOKEN: '${{ github.token }}'
      run: |
        STATUS=$(cat cumulusci-flow.log | grep -o '${{ inputs.commit-status-regex }}')
        gh api \
          --method POST \
          -H "Accept: application/vnd.github.v3+json" \
          '/repos/${{ github.repository }}/statuses/${{ github.sha }}' \
          -f state='success' \
          -f description="${{ inputs.commit-status-description-prefix }}$STATUS" \
          -f context='${{ inputs.commit-status-name }}'
      shell: bash
      
    - name: Delete Scratch Org
      if: ${{ always() }}
      shell: bash
      run: |
        orginfo=`cci org info --org ${{ inputs.org-name }} --json | grep is_sandbox`
        IFS=':'
        read -a strarr <<< "$orginfo"
        is_sandbox=${strarr[1]}
        if [ "$is_sandbox" = " false," ]; then
          cci org scratch_delete ${{ inputs.org-name }}
        fi
